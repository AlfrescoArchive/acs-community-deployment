# This is a YAML-formatted file.  Declare variables to be passed into your templates.

# ACS will be created in a k8s cluster with a minimum of 12GB memory to split among below nodes:
# 1 x repository, 1 x share and 1 x postgresql

# Limit container memory and assign X percentage to JVM.  There are couple of ways to allocate JVM Memory for ACS Containers
# For example: 'JAVA_OPTS: "$JAVA_OPTS -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"'
# But, as per Oracle docs (https://docs.oracle.com/javase/9/gctuning/parallel-collector1.htm#JSGCT-GUID-CAB83393-3438-44ED-98F0-D15641B43C7D)
# If container memory is not explicitly set, then the above flags will default max heap to 1/4th of container's memory which may not be ideal.
# Hence, setting up explicit Container memory and then assigning a percentage of it to the JVM for performance tuning.

repository:
  replicaCount: 1
  image:
    repository: alfresco/alfresco-content-repository-community
    tag: "6.1.1"
    pullPolicy: Always
    internalPort: 8080
  service:
    name: alfresco
    type: ClusterIP
    externalPort: &repositoryExternalPort 80
  ingress:
    path: /alfresco
    maxUploadSize: "5g"
  environment:
    JAVA_OPTS: " -Dsolr.base.url=/solr
      -Dsolr.secureComms=none
      -Dindex.subsystem.name=solr6
      -Ddeployment.method=HELM_CHART
      -Xms2000M -Xmx2000M"
  resources:
    requests:
      memory: "3000Mi"
    limits:
      memory: "3000Mi"
  # The repository readiness probe is used to check startup only as a failure
  # of the liveness probe later will result in the pod being restarted.
  readinessProbe:
    initialDelaySeconds: 60
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 6
  livenessProbe:
    initialDelaySeconds: 130
    periodSeconds: 20
    timeoutSeconds: 10

# Declares the api-explorer service used by the content repository
apiexplorer:
  ingress:
    path: /api-explorer

# Define the alfresco-share properties to use in the k8s cluster
# This is the default presentation layer(UI) of Alfresco Content Services
share:
  replicaCount: 1
  image:
    repository: alfresco/alfresco-share
    tag: "6.0.c"
    pullPolicy: Always
    internalPort: 8080
  service:
    name: share
    type: ClusterIP
    externalPort: 80
  ingress:
    path: /share
  resources:
    requests:
      memory: "2000Mi"
    limits:
      memory: "2000Mi"
  environment:
    CATALINA_OPTS: " -Xms1000M -Xmx1000M"
  readinessProbe:
    initialDelaySeconds: 60
    periodSeconds: 20
    timeoutSeconds: 10
  livenessProbe:
    initialDelaySeconds: 130
    periodSeconds: 20
    timeoutSeconds: 10

# Defines the mounting points for the persistence required by the apps in the
# cluster the alf_data folder from alfresco-content-repository app is mapped to
# alfresco-content-services/repository-data
persistence:
  existingClaim: "alfresco-volume-claim"
  repository:
    data:
      mountPath: "/usr/local/tomcat/alf_data"
      subPath: "alfresco-content-services/repository-data"

# Settings that define that alfresco-content-services (this helm chart) is dependent of alfresco-infrastructure chart
# alfresco-infrastructure is defined here: https://github.com/Alfresco/alfresco-infrastructure-deployment/tree/master/charts/incubator/alfresco-infrastructure
# This dependency is needed because the alfresco-infrastructure is meant to provide common tools and frameworks to be used
# by all the components in the DBP (https://www.alfresco.com/platform)
# Currently the Alfresco Content Services product helm chart (this chart) only needs
# the persistent volume claim (pvc) definition defined in the infrastructure
alfresco-content-services:
  alfresco-infrastructure:
    enabled: true
# All the components from the alfresco-infrastructure are disabled, because Alfresco Content Services product helm chart
# only needs the pvc defined in the dependency alfresco-infrastructure
alfresco-infrastructure:
  rabbitmq-ha:
    enabled: false
  activemq:
    enabled: false
  alfresco-identity-service:
    enabled: false
  alfresco-activiti-cloud-registry:
    enabled: false
  alfresco-api-gateway:
    enabled: false

alfresco-search:
  enabled: true
  repository:
    # The value for "host" is the name of this chart 
    host: alfresco-content-services-community
    port: *repositoryExternalPort
  ingress:
    # Alfresco Search services endpoint ('/solr') is disabled by default
    # To enable it please see: https://github.com/Alfresco/acs-community-deployment/blob/master/helm/alfresco-content-services-community/README.md#configuration
    enabled: false

# choose if you want network policy enabled
networkpolicysetting:
  enabled: true

# Defines properties required by alfresco for connecting to the database
# Note! : If you set database.external to true you will have to setup the driver, user, password and JdbcUrl 
# Also make sure that the container has the db driver in /usr/local/tomcat/lib since the current image only has the postgresql driver
database:
  external: false
  # driver:     #ex: org.postgresql.Driver
  # user:     #ex: alfresco
  # password:     #ex: alfresco
  # url:    # ex: jdbc:postgresql://oldfashioned-mule-postgresql-acs:5432/alfresco

# Defines the properties to be used for the required postgres DB
# Note: the database (tables) information is also saved in the persistent volume claim
postgresql:
  replicaCount: 1
  ## If true, install the postgresql chart alongside Alfresco Content Services. 
  # Note: Set this to false if you use an external database.
  enabled: true
  nameOverride: postgresql-acs
  imageTag: "10.1"
  postgresUser: alfresco
  postgresPassword: alfresco
  postgresDatabase: alfresco
  postgresConfig:
    max_connections: 300
    log_min_messages: LOG
  persistence:
    existingClaim: "alfresco-volume-claim"
    subPath: "alfresco-content-services/database-data"
  resources:
    requests:
      memory: "1500Mi"
    limits:
      memory: "1500Mi"


# If there is a need to pull images from a private docker repo, a secret can be defined in helm and passed as an argument
# to the install command:
# e.g.: helm install alfresco-content-services --set registryPullSecrets=private-repo-registry-secret
# or uncomment the following line if you don't want/need to pass it as a parameter on every install command :
# registryPullSecrets: private-repo-registry-secret
# for more information: https://github.com/Alfresco/alfresco-anaxes-shipyard/blob/master/SECRETS.md
